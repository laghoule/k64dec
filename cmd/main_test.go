package main

import (
	"bytes"
	"os"
	"testing"

	"github.com/pterm/pterm"
	"github.com/stretchr/testify/assert"
)

func captureConsoleOutput(f func()) []byte {
	var buf bytes.Buffer
	pterm.SetDefaultOutput(&buf)

	f()

	pterm.SetDefaultOutput(os.Stderr)
	return buf.Bytes()
}

func TestPrintVersion(t *testing.T) {
	captured := captureConsoleOutput(
		func() {
			if err := printVersion(); err != nil {
				t.Error(err)
				return
			}
		},
	)

	expected := []byte{0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x39, 0x36, 0x6d, 0x1b, 0x5b, 0x39, 0x36, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x20, 0x7c, 0x20, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x39, 0x36, 0x6d, 0x1b, 0x5b, 0x39, 0x36, 0x6d, 0x47, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x20, 0x7c, 0x20, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x39, 0x36, 0x6d, 0x1b, 0x5b, 0x39, 0x36, 0x6d, 0x47, 0x69, 0x74, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0xa, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x20, 0x7c, 0x20, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x1b, 0x5b, 0x39, 0x30, 0x6d, 0x20, 0x7c, 0x20, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x1b, 0x5b, 0x33, 0x39, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x30, 0x6d, 0x1b, 0x5b, 0x30, 0x6d, 0xa}
	assert.Equal (t, expected, captured)
}
